#!/usr/bin/python3
import argparse
import re
import subprocess
from argparse import Namespace


def call(commands):
    return subprocess.run(commands, stdout=subprocess.PIPE).stdout.decode()


def main():
    parser = argparse.ArgumentParser(description="控制音量的簡單命令行")
    parser.add_argument(
        "--raise-volume", action="store_true", help="提高音量2%", required=False
    )
    parser.add_argument(
        "--lower-volume", action="store_true", help="降低音量2%", required=False
    )
    parser.add_argument(
        "--toggle-mute", action="store_true", help="開啟或關閉靜音", required=False
    )
    parser.add_argument(
        "--show-volume", action="store_true", help="顯示當前音量", required=False
    )
    parser.add_argument("--set-volume", type=int, help="設定音量", required=False)

    commands = ["pactl"]
    args = parser.parse_args()
    f = call
    match args:
        case Namespace(lower_volume=True):
            commands.extend(["set-sink-volume", "0", "-2%"])
        case Namespace(raise_volume=True):
            commands.extend(["set-sink-volume", "0", "+2%"])
        case Namespace(toggle_mute=True):
            commands.extend(["set-sink-mute", "0", "toggle"])
        case Namespace(show_volume=True):
            commands.extend(["get-sink-volume", "0"])

            def _call(commands):
                result = subprocess.run(commands, stdout=subprocess.PIPE)
                return re.findall("([0-9]*)%", result.stdout.decode())[0]

            f = _call
        case Namespace(set_volume=value):
            commands.extend(["set-sink-volume", "0", f"{str(value)}%"])
        case _:
            parser.print_help()
            exit(0)

    if len(commands) > 1:
        print(f(commands))


if __name__ == "__main__":
    main()
