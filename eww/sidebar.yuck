(defwindow sidebar
    :geometry (geometry :x "0px"
                        :y "3px"
                        :width "5px"
                        :height "805px"
                        :anchor "bottom left")
    :stacking "overlay"
    :monitor "0"
(sidebar))

(defwidget sidebar [] 
	(eventbox :halign "start" :onhover "eww update side=true" :onhoverlost "eww update side=false"
		(revealer :transition "slideright" :reveal side :duration "550ms"
		(side))))
(defvar side false)

;; background
(defwidget side [] 
        (box :class "side" :orientation "v" :space-evenly "false" :spacing "30" :halign "start"
        (fetch)
        (top)
        (music)
        (system)
        (tray))
)

(defwidget top [] 
    (box :orientation "h" :space-evenly "false" :spacing "30" :halign "center"
    (date)
    (weather))
)

;;  Music Widgets
(defwidget music [] 
	 (box 	:class "music-player"
			:orientation "h" 
		 	:space-evenly "false"
			:spacing 15   
		 	:halign "center"
            :valign "start"
            :hexpand "true"
	(box 	:class "album_art" 
		 	:style "background-image: url('${art}');")
	(box 	:orientation "v" 
		 	:space-evenly "false"
		 	:valign "center"
			:halign "center"
		 	:spacing 10 
 	(label  :class "artist"
		 	:limit-width 10
		 	:text title)
	(label  :class "song"
		 	:limit-width 10
		 	:text artist) 
	(box 	:orientation "h"  
		 	:space-evenly "false"
			:valign "center"
			:halign "center"
			:spacing 25
			(button :class "btn_prev" :onclick "~/.config/eww/scripts/music previous" "玲")
			(button :class "btn_play" :onclick "~/.config/eww/scripts/music toggle" playpause)
			(button :class "btn_next" :onclick "~/.config/eww/scripts/music next" "怜")))))

(defpoll art		:interval "1s"  "~/.config/eww/scripts/music coverloc")
(defpoll title		:interval "1s"  "~/.config/eww/scripts/music title")
(defpoll artist		:interval "1s"  "~/.config/eww/scripts/music artist")
(defpoll playpause	:interval "1s"  "~/.config/eww/scripts/music statusicon")

;; weather
(defwidget weather [] 
		(box :class "weather"  :orientation "v" :spacing -2 :space-evenly "false" :vexpand "true" :hexpand "false" :valign "start" :halign "center"
				(label :class "iconweather" :halign "center" :valign "center" :style "color: ${HEX};" :text ICON)
				(button :onclick "~/.config/eww/scripts/weather --getdata && eww reload &" :class "label_temp" :valign "center" :halign "center" "${TEMP}")))

(defwidget date [] 
	(box :class "date" :orientation "v" :valign "start" :space-evenly "false" :halign "center"
		(label 
		:text DAY)
		(label 
		:text POO)
	(label :class "foo"
	:text FOO)))

(defpoll FOO :interval "6h"  "date '+%d'")  	
(defpoll DAY :interval "6h" "date '+%A'")
(defpoll POO :interval "6h" "date '+%B'")


;; Weather vars
(defpoll ICON :interval "15m" `scripts/weather --icon`)
(defpoll TEMP :interval "15m" `scripts/weather --temp`)
(defpoll HEX :interval "15m" `scripts/weather --hex`)

;; <-- System -->
(defwidget system [] 
	(box :class "stats-box" :space-evenly "false" :orientation "v" :valign "start" :halign "center" :spacing 12
			(box :class "stats" :hexpand "false" :vexpand "false" :space-evenly "false"
				(label :tooltip "${round(EWW_CPU.avg, 0)}%" :class "stats-icon" :text "")
				(scale :min 0 :max 101 :active false :value {EWW_CPU.avg} :class "scale" :width 280))
			(box :class "stats" :hexpand "false" :vexpand "false" :space-evenly "false"
				(label :tooltip "${round(EWW_RAM.used_mem_perc, 0)}%" :class "stats-icon" :text "﬙")
				(scale :min 0 :max 101 :active false :value {EWW_RAM.used_mem_perc} :class "scale" :width 280))
			(box :class "stats" :hexpand "false" :vexpand "false" :space-evenly "false"
				(label :tooltip "${round(EWW_DISK["/"].used_perc, 0)}%" :class "stats-icon" :text "")
				(scale :min 0 :max 101 :active false :value {(EWW_DISK["/"].used / EWW_DISK["/"].total) * 100} :class "scale" :width 280))
			(box :class "stats" :hexpand "false" :vexpand "false" :space-evenly "false"
				(label :tooltip "${headphone}%" :class "stats-icon" :text "󰋋")
				(scale :min 0 :max 101 :active false :value headphone :class "scale" :width 280))
			(box :class "stats" :hexpand "false" :vexpand "false" :space-evenly "false"
				(button :tooltip "${volume}%" :onclick "amixer set Master toggle" :onrightclick "alsamixer &" :class "stats-icon" "墳")
				(scale :min 0 :max 101 :active true :value volume :class "scale" :width 280 :onchange "pactl set-sink-volume 0 {}%"))))

    (defpoll volume 	:interval "1s"  "~/.config/eww/scripts/sbvol --get")
    (defpoll icon	:interval "1s"  "~/.config/eww/scripts/sbvol --icon")    
    (defpoll headphone 	:interval "1s"  "~/.config/eww/scripts/headphone")

(defwidget tray []
	(box :class "buttons" :orientation "h" :space-evenly "false" :halign "center"  :valign "start" :spacing "2"
	(button :class "poweroff" :onclick "alacritty poweroff &" "⏻")
	(button :class "reboot" :onclick "alacritty reboot &" "")
	(button :class "firmware" :onclick "kitty systemctl reboot --firmware &" "拉")
	(button :class "exit" :onclick "hyprctl dispatch exit exit" "")
	(button :class "restart" :onclick "alacritty nvim ~/.config/hypr/hyprland.conf &" "")))

(defpoll uptime :interval "1m" "uptime -p | sed -e 's/up //;s/ hours,/h/;s/ minutes/m/'")
(defpoll packages :interval "5m" `pacman -Q | wc -l`)
(defpoll kernal :interval "5m" `uname -r`) 
(defpoll name :interval "5m" `whoami`)  
(defpoll host :interval "5m" `uname -n`) 
(defpoll wm :interval "5m" `echo $XDG_CURRENT_DESKTOP`) 

(defwidget fetch []
            (box :class "fetch"  :orientation "v" :space-evenly "false" :halign "center"  :valign "start" :spacing "10"
            (label :class "host" :halign "start"
            :text " : ${name}@${host}")
            (label :class "wm" :halign "start"
            :text " : ${wm}")
            (label :class "uptime" :halign "start"
            :text " : ${uptime}")
            (label :class "packages" :halign "start"
            :text " : ${packages}")
            (label :class "kernal" :halign "start"
            :text " : ${kernal}")
            )
    )
